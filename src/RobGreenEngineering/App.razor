@using Blazored.LocalStorage
@using Microsoft.AspNetCore.Components.Authorization
@inject ILocalStorageService _localStorageService;
@inject AuthenticationStateProvider _authStateProvider

<CascadingAuthenticationState>
    <Router AppAssembly="@typeof(App).Assembly" OnNavigateAsync="@OnNavigateAsync">
        <Found Context="routeData">
            <AuthorizeRouteView RouteData="@routeData" DefaultLayout="@typeof(MainLayout)" />
            <FocusOnNavigate RouteData="@routeData" Selector="h1" />
        </Found>
        <NotFound>
            <PageTitle>Not found</PageTitle>
            <LayoutView Layout="@typeof(MainLayout)">
                <p role="alert">Sorry, there's nothing at this address.</p>
            </LayoutView>
        </NotFound>
    </Router>
</CascadingAuthenticationState>

@code
{

    private async Task OnNavigateAsync(NavigationContext args)
    {
        const string storageKey = "robgreen.me.auth";

        var auth = await _localStorageService.GetItemAsync<string>(storageKey);

        var user = (await (_authStateProvider as CustomAuthStateProvider).GetAuthenticationStateAsync()).User;

        if (!string.IsNullOrEmpty(auth) && !user.Identity.IsAuthenticated)
        {
        //    var response = await _apiLogic.UserProfileAsync();

        //    if (response.Message == "Success")
        //    {
            (_authStateProvider as CustomAuthStateProvider).SetAuthInfo();
        //    }
        //    else if (response.Message == "Unauthorized")
        //    {
        //        await _localStorageService.RemoveItemAsync(storageKey);
        //    }
        }
    }

}