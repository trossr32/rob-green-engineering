name: Dotnet outdated

# Run workflow on every push to the master branch
on:
  pull_request:
    branches: [ main ]
  
  workflow_dispatch:

env:
  DOTNET_VERSION: '8.x.x'
  NODE_VERSION: '16.x'
  SOLUTION_PATH: 'src/RobGreenEngineering.sln'
  PROJECT_PATH: 'src/RobGreenEngineering/RobGreenEngineering.csproj'

permissions: write-all

jobs:
  dotnet-outdated:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    # - name: Setup .NET Core
    #   uses: actions/setup-dotnet@v3
    #   with:
    #     dotnet-version: ${{ env.DOTNET_VERSION }}
        # dotnet-quality: preview
        
    # - name: Setup Node.js ${{ env.NODE_VERSION }}
    #   uses: actions/setup-node@v1
    #   with:
    #     node-version: ${{ env.NODE_VERSION }}

    # - name: Run outdated script
    #   id: outdated
    #   shell: pwsh
    #   run: |
    #     .\Powershell\outdated.ps1 ${{ secrets.GITHUB_TOKEN }} ${{ env.SOLUTION_PATH }}

    - name: Install dotnet outdated tool
      shell: bash
      run: |
        dotnet tool install --global dotnet-outdated-tool

    - name: Run outdated script
      id: outdated
      shell: bash
      run: |
        echo "dotnet outdated ${{ env.SOLUTION_PATH }} -of Markdown -o outdated.md"

        OUTPUT=`dotnet outdated ${{ env.SOLUTION_PATH }} -of Markdown -o outdated.md`
        echo "$OUTPUT"

        if [[ $OUTPUT =~ "No outdated dependencies" ]]; then
            printf $OUTPUT >> outdated.md
        elif [[ $OUTPUT =~ "Errors occurred" ]]; then
            printf $OUTPUT >> outdated.md
            exit 1
        else
            echo "updates found"
        fi

    # - name: Read file contents
    #   id: read_file
    #   uses: andstor/file-reader-action@v1
    #   with:
    #     path: "outdated.md"

    - name: PR comment with file
      uses: thollander/actions-comment-pull-request@v2
      with:
        filePath: "outdated.md"
        comment_tag: outdated

    # - name: Update PR
      # uses: actions/github-script@v7
      # env:
      #   MARKDOWN: ${{ steps.read_file.outputs.contents }}
      # with:
      #   github-token: ${{ secrets.GITHUB_TOKEN }}
      #   script: |
      #     // Retrieve existing bot comments for the PR
      #     const { data: comments } = await github.rest.issues.listComments({
      #       owner: context.repo.owner,
      #       repo: context.repo.repo,
      #       issue_number: context.issue.number,
      #     })
                    
      #     // a comment header excluding the job-name
      #     var commentHeader = '${{ github.workflow }}: results'

      #     const botComment = comments.find(comment => {
      #       return comment.user.type === 'Bot' && comment.body.includes(commentHeader)
      #     })

      #     // If we have a comment, update it, otherwise create a new one
      #     if (botComment) {
      #       github.rest.issues.updateComment({
      #         owner: context.repo.owner,
      #         repo: context.repo.repo,
      #         comment_id: botComment.id,
      #         body: '${{ env.MARKDOWN }}'
      #       })
      #     } else {
      #       github.rest.issues.createComment({
      #         issue_number: context.issue.number,
      #         owner: context.repo.owner,
      #         repo: context.repo.repo,
      #         body: '${{ env.MARKDOWN }}'
      #       })
      #     }
        
    # - name: Restore packages
    #   run: dotnet restore ${{ env.SOLUTION_PATH }}

    # - name: Check outdated
    #   run:
    #     dotnet outdated ${{ env.SOLUTION_PATH }} -f